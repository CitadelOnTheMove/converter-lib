// Generated by ANTLR 4.1
package eu.citadel.converter.schema.antlr;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class BasicSchemaLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__6=1, T__5=2, T__4=3, T__3=4, T__2=5, T__1=6, T__0=7, SPACES=8, BOOLEAN=9, 
		TRUE=10, FALSE=11, NULL=12, NUMBER=13, FLOAT=14, INTEGER=15, TEXT=16;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'\"id\":'", "']'", "'{'", "','", "'['", "':'", "'}'", "SPACES", "BOOLEAN", 
		"'true'", "'false'", "'null'", "NUMBER", "FLOAT", "INTEGER", "TEXT"
	};
	public static final String[] ruleNames = {
		"T__6", "T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "SPACES", "BOOLEAN", 
		"TRUE", "FALSE", "NULL", "NUMBER", "FLOAT", "INTEGER", "TEXT", "DIGIT", 
		"ALPHA", "INT", "EXP", "ESC", "UNICODE", "HEX"
	};


	public BasicSchemaLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "BasicSchema.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 7: SPACES_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void SPACES_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: _channel = HIDDEN;  break;
		}
	}

	public static final String _serializedATN =
		"\3\uacf5\uee8c\u4f5d\u8b0d\u4a45\u78bd\u1b2f\u3378\2\22\u00a6\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\3\2"+
		"\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3"+
		"\t\6\tE\n\t\r\t\16\tF\3\t\3\t\3\n\3\n\5\nM\n\n\3\13\3\13\3\13\3\13\3\13"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\5\16a\n\16\3\17"+
		"\5\17d\n\17\3\17\3\17\3\17\7\17i\n\17\f\17\16\17l\13\17\3\17\5\17o\n\17"+
		"\3\20\5\20r\n\20\3\20\3\20\5\20v\n\20\3\21\3\21\3\21\7\21{\n\21\f\21\16"+
		"\21~\13\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\6\24\u0088\n\24\r\24"+
		"\16\24\u0089\3\24\7\24\u008d\n\24\f\24\16\24\u0090\13\24\5\24\u0092\n"+
		"\24\3\25\3\25\5\25\u0096\n\25\3\25\3\25\3\26\3\26\3\26\5\26\u009d\n\26"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\2\31\3\3\1\5\4\1\7\5\1\t\6\1"+
		"\13\7\1\r\b\1\17\t\1\21\n\2\23\13\1\25\f\1\27\r\1\31\16\1\33\17\1\35\20"+
		"\1\37\21\1!\22\1#\2\1%\2\1\'\2\1)\2\1+\2\1-\2\1/\2\1\3\2\13\5\2\13\f\17"+
		"\17\"\"\4\2$$^^\3\2\62;\4\2C\\c|\3\2\63;\4\2GGgg\4\2--//\n\2$$\61\61^"+
		"^ddhhppttvv\5\2\62;CHch\u00ad\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t"+
		"\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2"+
		"\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2"+
		"\37\3\2\2\2\2!\3\2\2\2\3\61\3\2\2\2\5\67\3\2\2\2\79\3\2\2\2\t;\3\2\2\2"+
		"\13=\3\2\2\2\r?\3\2\2\2\17A\3\2\2\2\21D\3\2\2\2\23L\3\2\2\2\25N\3\2\2"+
		"\2\27S\3\2\2\2\31Y\3\2\2\2\33`\3\2\2\2\35c\3\2\2\2\37q\3\2\2\2!w\3\2\2"+
		"\2#\u0081\3\2\2\2%\u0083\3\2\2\2\'\u0091\3\2\2\2)\u0093\3\2\2\2+\u0099"+
		"\3\2\2\2-\u009e\3\2\2\2/\u00a4\3\2\2\2\61\62\7$\2\2\62\63\7k\2\2\63\64"+
		"\7f\2\2\64\65\7$\2\2\65\66\7<\2\2\66\4\3\2\2\2\678\7_\2\28\6\3\2\2\29"+
		":\7}\2\2:\b\3\2\2\2;<\7.\2\2<\n\3\2\2\2=>\7]\2\2>\f\3\2\2\2?@\7<\2\2@"+
		"\16\3\2\2\2AB\7\177\2\2B\20\3\2\2\2CE\t\2\2\2DC\3\2\2\2EF\3\2\2\2FD\3"+
		"\2\2\2FG\3\2\2\2GH\3\2\2\2HI\b\t\2\2I\22\3\2\2\2JM\5\25\13\2KM\5\27\f"+
		"\2LJ\3\2\2\2LK\3\2\2\2M\24\3\2\2\2NO\7v\2\2OP\7t\2\2PQ\7w\2\2QR\7g\2\2"+
		"R\26\3\2\2\2ST\7h\2\2TU\7c\2\2UV\7n\2\2VW\7u\2\2WX\7g\2\2X\30\3\2\2\2"+
		"YZ\7p\2\2Z[\7w\2\2[\\\7n\2\2\\]\7n\2\2]\32\3\2\2\2^a\5\35\17\2_a\5\37"+
		"\20\2`^\3\2\2\2`_\3\2\2\2a\34\3\2\2\2bd\7/\2\2cb\3\2\2\2cd\3\2\2\2de\3"+
		"\2\2\2ef\5\'\24\2fj\7\60\2\2gi\5#\22\2hg\3\2\2\2il\3\2\2\2jh\3\2\2\2j"+
		"k\3\2\2\2kn\3\2\2\2lj\3\2\2\2mo\5)\25\2nm\3\2\2\2no\3\2\2\2o\36\3\2\2"+
		"\2pr\7/\2\2qp\3\2\2\2qr\3\2\2\2rs\3\2\2\2su\5\'\24\2tv\5)\25\2ut\3\2\2"+
		"\2uv\3\2\2\2v \3\2\2\2w|\7$\2\2x{\5+\26\2y{\n\3\2\2zx\3\2\2\2zy\3\2\2"+
		"\2{~\3\2\2\2|z\3\2\2\2|}\3\2\2\2}\177\3\2\2\2~|\3\2\2\2\177\u0080\7$\2"+
		"\2\u0080\"\3\2\2\2\u0081\u0082\t\4\2\2\u0082$\3\2\2\2\u0083\u0084\t\5"+
		"\2\2\u0084&\3\2\2\2\u0085\u0092\7\62\2\2\u0086\u0088\t\6\2\2\u0087\u0086"+
		"\3\2\2\2\u0088\u0089\3\2\2\2\u0089\u0087\3\2\2\2\u0089\u008a\3\2\2\2\u008a"+
		"\u008e\3\2\2\2\u008b\u008d\5#\22\2\u008c\u008b\3\2\2\2\u008d\u0090\3\2"+
		"\2\2\u008e\u008c\3\2\2\2\u008e\u008f\3\2\2\2\u008f\u0092\3\2\2\2\u0090"+
		"\u008e\3\2\2\2\u0091\u0085\3\2\2\2\u0091\u0087\3\2\2\2\u0092(\3\2\2\2"+
		"\u0093\u0095\t\7\2\2\u0094\u0096\t\b\2\2\u0095\u0094\3\2\2\2\u0095\u0096"+
		"\3\2\2\2\u0096\u0097\3\2\2\2\u0097\u0098\5\37\20\2\u0098*\3\2\2\2\u0099"+
		"\u009c\7^\2\2\u009a\u009d\t\t\2\2\u009b\u009d\5-\27\2\u009c\u009a\3\2"+
		"\2\2\u009c\u009b\3\2\2\2\u009d,\3\2\2\2\u009e\u009f\7w\2\2\u009f\u00a0"+
		"\5/\30\2\u00a0\u00a1\5/\30\2\u00a1\u00a2\5/\30\2\u00a2\u00a3\5/\30\2\u00a3"+
		".\3\2\2\2\u00a4\u00a5\t\n\2\2\u00a5\60\3\2\2\2\22\2FL`cjnquz|\u0089\u008e"+
		"\u0091\u0095\u009c";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
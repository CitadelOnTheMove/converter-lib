// Generated by ANTLR 4.1
package eu.citadel.converter.schema.antlr;
import org.antlr.v4.runtime.misc.NotNull;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;

/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by {@link BasicSchemaParser}.
 *
 * @param <T> The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */
public interface BasicSchemaVisitor<T> extends ParseTreeVisitor<T> {
	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#element}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitElement(@NotNull BasicSchemaParser.ElementContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#FullObject}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitFullObject(@NotNull BasicSchemaParser.FullObjectContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#EmptyList}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitEmptyList(@NotNull BasicSchemaParser.EmptyListContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#NullValue}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitNullValue(@NotNull BasicSchemaParser.NullValueContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#attribute}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitAttribute(@NotNull BasicSchemaParser.AttributeContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#FullList}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitFullList(@NotNull BasicSchemaParser.FullListContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#EmptyObject}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitEmptyObject(@NotNull BasicSchemaParser.EmptyObjectContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#id}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitId(@NotNull BasicSchemaParser.IdContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#ListValue}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitListValue(@NotNull BasicSchemaParser.ListValueContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#ObjectValue}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitObjectValue(@NotNull BasicSchemaParser.ObjectValueContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#NumberValue}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitNumberValue(@NotNull BasicSchemaParser.NumberValueContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#TextValue}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitTextValue(@NotNull BasicSchemaParser.TextValueContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#FullRules}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitFullRules(@NotNull BasicSchemaParser.FullRulesContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#BooleanValue}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitBooleanValue(@NotNull BasicSchemaParser.BooleanValueContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#option}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitOption(@NotNull BasicSchemaParser.OptionContext ctx);

	/**
	 * Visit a parse tree produced by {@link BasicSchemaParser#EmptyRules}.
	 * @param ctx the parse tree
	 * @return the visitor result
	 */
	T visitEmptyRules(@NotNull BasicSchemaParser.EmptyRulesContext ctx);
}